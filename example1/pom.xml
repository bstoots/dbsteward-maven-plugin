<!--
 * This software is licensed under the BSD (2 Clause) license.
 * http://opensource.org/licenses/BSD-2-Clause
 *
 * Copyright (c) 2014, Nicholas J Kiraly, All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.dbsteward.maven</groupId>
  <artifactId>dbsteward-maven-plugin-example1</artifactId>
  <version>1.3.7-SNAPSHOT</version>

  <name>DBSteward Maven Plugin Example 1</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.dbsteward.path>dbsteward</project.dbsteward.path>
    <project.dbsteward.source.filename>example1.xml</project.dbsteward.source.filename>
    <project.dbsteward.target.name>someapp</project.dbsteward.target.name>
    <project.dbsteward.target.url>jdbc:postgresql://localhost:5432/someapp</project.dbsteward.target.url>
    <project.dbsteward.target.username>dbsteward_ci</project.dbsteward.target.username>
    <project.dbsteward.target.password>password1</project.dbsteward.target.password>
    <project.dbsteward.target.bootstrapUrl>jdbc:postgresql://localhost:5432/postgres</project.dbsteward.target.bootstrapUrl>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.dbsteward.maven</groupId>
      <artifactId>dbsteward-maven-plugin</artifactId>
      <version>1.3.7-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>sql-maven-plugin</artifactId>
      <version>1.5</version>
     </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.dbsteward.maven</groupId>
        <artifactId>dbsteward-maven-plugin</artifactId>
        <version>1.3.7-SNAPSHOT</version>

        <configuration>
          <!--
            DBSteward relative or absolute binary - should be available on your path
            example values:
            dbsteward if you installed DBSteward via PEAR
            /home/dev/DBSteward/bin/dbsteward your DBSteward working copy bin, if you git cloned it
          -->
          <dbstewardBinaryPath>${project.dbsteward.path}</dbstewardBinaryPath>
        </configuration>

        <executions>
          <execution>
            <id>build-sql-file</id>
            <!-- execution is in validate phase so that buildFilename property can be stored by plugin -->
            <phase>compile</phase>
            <goals>
              <goal>sql-compile</goal>
            </goals>
            <configuration>
              <!-- Relative or absolute path to DBSteward database definition XML file -->
              <definitionFile>${project.dbsteward.source.filename}</definitionFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>sql-maven-plugin</artifactId>
        <version>1.5</version>

        <dependencies>
          <!-- artifact that provides <configuration> property <driver> below -->
          <dependency>
            <groupId>postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>8.4-702.jdbc4</version>
          </dependency>
          <!-- pg 9 groupId changed to org.postgresql -->
          <!--
          <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.2-1004-jdbc4</version>
          </dependency>
          -->
        </dependencies>

        <!-- common configuration shared by all executions -->
        <configuration>
          <driver>org.postgresql.Driver</driver>
          <url>${project.dbsteward.targetdb.url}</url>
          <username>${project.dbsteward.targetdb.username}</username>
          <password>${project.dbsteward.targetdb.password}</password>
          <!--
            You can comment out username/password configurations and
            have maven to look them up in your settings.xml using ${settingsKey}
            <settingsKey>dbstewardCI</settingsKey>
          -->
          <!-- all executions are ignored if -Dmaven.test.skip=true -->
          <skip>${maven.test.skip}</skip>
        </configuration>

        <executions>
          <execution>
            <id>create-db</id>
            <phase>package</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <url>${project.dbsteward.targetdb.bootstrapUrl}</url>
              <!-- no transaction -->
              <autocommit>true</autocommit>
              <sqlCommand>CREATE DATABASE ${project.dbsteward.targetdb.name}</sqlCommand>
            </configuration>
          </execution>

          <execution>
            <id>load-db</id>
            <phase>package</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <autocommit>true</autocommit>
              <srcFiles>
                <srcFile>${project.dbsteward.output.buildFileName}</srcFile>
              </srcFiles>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <!--
      Usage

      With the executions as defined,

      Generate database create SQL file by specifying the compile goal
      $ mvn compile

      Generate and Create the database with the package goal which will run compile as a previous lifecycle step
      $ mvn package
    -->
  </build>

</project>
